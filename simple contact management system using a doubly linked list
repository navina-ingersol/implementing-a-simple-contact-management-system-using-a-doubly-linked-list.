#include <stdio.h>
#include <stdlib.h>
#include <string.h>
// Define a node in the doubly linked list
struct Node {
char name[50];
struct Node* prev;
struct Node* next;
};
// Function prototypes
struct Node* createNode(char* name);
void createContactList(struct Node** head, int n);
void append(struct Node** head, char* name);
void insertAtPosition(struct Node** head, char* name, int pos);
void deleteContact(struct Node** head, char* identifier, int by_name);
void displayList(struct Node* head);
void displayListReverse(struct Node* head);
void searchContact(struct Node* head, char* name);
int main() {
struct Node* head = NULL;
int choice, n, pos;
char name[50], identifier[50], delete_by;

while (1) {
printf("\n1. Create the list of contacts\n");
printf("2. Insert a new contact\n");
printf("3. Delete a contact\n");
printf("4. Display contact list\n");
printf("5. Search for a contact\n");
printf("6. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the number of contacts: ");
scanf("%d", &n);
createContactList(&head, n);
displayList(head);
displayListReverse(head);
break;
case 2:
printf("Enter the contact's name to insert: ");
scanf("%s", name);
printf("Enter the position (0-based index) to insert the contact: ");
scanf("%d", &pos);
insertAtPosition(&head, name, pos);
displayList(head);
displayListReverse(head);
break;
case 3:
printf("Delete by name or position? (n/p): ");
scanf(" %c", &delete_by);
if (delete_by == 'n') {
printf("Enter the contact's name to delete: ");
scanf("%s", identifier);
deleteContact(&head, identifier, 1);
} else if (delete_by == 'p') {
printf("Enter the position (0-based index) to delete the contact: ");
scanf("%d", &pos);
snprintf(identifier, sizeof(identifier), "%d", pos);
deleteContact(&head, identifier, 0);
}
displayList(head);
displayListReverse(head);

break;
case 4:
displayList(head);
displayListReverse(head);
break;
case 5:
printf("Enter the contact's name to search: ");
scanf("%s", name);
searchContact(head, name);
break;
case 6:
printf("Exiting the program...\n");
exit(0);
break;
default:
printf("Invalid choice. Please try again.\n");
}
}
return 0;
}
// Create a new node
struct Node* createNode(char* name) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
strcpy(newNode->name, name);
newNode->prev = NULL;
newNode->next = NULL;
return newNode;
}
// (i) Create the list of contacts
void createContactList(struct Node** head, int n) {
char name[50];
for (int i = 0; i < n; i++) {
printf("Enter contact name %d: ", i + 1);
scanf("%s", name);
append(head, name);
}
}

// Append a node at the end of the list
void append(struct Node** head, char* name) {
struct Node* newNode = createNode(name);
if (*head == NULL) {
*head = newNode;
} else {
struct Node* temp = *head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
newNode->prev = temp;
}
}
// (ii) Insert a contact at a specific position
void insertAtPosition(struct Node** head, char* name, int pos) {
struct Node* newNode = createNode(name);
if (pos == 0) {
if (*head == NULL) {
*head = newNode;
} else {
newNode->next = *head;
(*head)->prev = newNode;
*head = newNode;
}
} else {
struct Node* temp = *head;
for (int i = 0; i < pos - 1 && temp != NULL; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Position out of bounds\n");
} else {
newNode->next = temp->next;
if (temp->next != NULL) {
temp->next->prev = newNode;
}
temp->next = newNode;
newNode->prev = temp;
}
}
}

// (iii) Delete a contact by name or position
void deleteContact(struct Node** head, char* identifier, int by_name) {
struct Node* temp = *head;
if (by_name) {
while (temp != NULL && strcmp(temp->name, identifier) != 0) {
temp = temp->next;
}
} else {
int pos = atoi(identifier);
for (int i = 0; i < pos && temp != NULL; i++) {
temp = temp->next;
}
}
if (temp == NULL) {
printf("Contact not found\n");
return;
}
if (temp->prev != NULL) {
temp->prev->next = temp->next;
} else {
*head = temp->next;
}
if (temp->next != NULL) {
temp->next->prev = temp->prev;
}
free(temp);
}
// (iv) Display the list forward and backward
void displayList(struct Node* head) {
printf("Contact list (forward): ");
struct Node* temp = head;
while (temp != NULL) {
printf("%s <-> ", temp->name);
temp = temp->next;
}
printf("NULL\n");
}
void displayListReverse(struct Node* head) {

printf("Contact list (backward): ");
struct Node* temp = head;
if (temp == NULL) {
printf("NULL\n");
return;
}
// Move to the end of the list
while (temp->next != NULL) {
temp = temp->next;
}
// Traverse backward
while (temp != NULL) {
printf("%s <-> ", temp->name);
temp = temp->prev;
}
printf("NULL\n");
}
// (v) Search for a contact by name
void searchContact(struct Node* head, char* name) {
struct Node* temp = head;
int pos = 0;
while (temp != NULL) {
if (strcmp(temp->name, name) == 0) {
printf("%s found at position %d\n", name, pos);
return;
}
temp = temp->next;
pos++;
}
printf("%s not found\n", name);
}
